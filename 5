boolean canShowCircles = true;
boolean isAnimating = false;
int duration = 100;
int animatingTime = 0;
ArrayList<Circle> circles;
PImage img;

void setup() {
  size(1080, 1080);
  circles = new ArrayList<Circle>();
  img = loadImage("1.pic.jpg");
  imageMode(CENTER);
}

void draw() {
  translate(width / 2, height / 2);
  background(0);
  for (Circle c : circles) {
    c.display();
  }
  if (isAnimating) {
    animatingTime++;
    if (animatingTime == duration) {
      isAnimating = false;
      canShowCircles = !canShowCircles;
    }
  }
}

void mousePressed() {
  //if (!isAnimating) {
  // if (canShowCircles) {
  makeCircles();
  isAnimating = true;
  animatingTime = 0;
  //} else {
  //  hideCircles();
  //  isAnimating = true;
  //  animatingTime = 0;
  //}
  //}
}

void makeCircles() {
  circles = new ArrayList<Circle>();
  for (int i = 0; i < 20000; i++) {
    float locSize = map(sqrt(random(1)), 0, 1, 0, 320);
    float locAng = random(TWO_PI);
    PVector loc = new PVector(random(-width/2, width/2), random(-height/2, height/2));
    float radius = random(2, 15);
    boolean isOverlapped = false;
    for (Circle other : circles) {
      if (PVector.dist(loc, other.loc) < radius + other.radius) {
        isOverlapped = true;
        continue;
      }
    }
    if (!isOverlapped) {
      circles.add(new Circle(loc, radius));
    }
  }
}

void hideCircles() {
}

class Circle {

  PVector loc;
  float radius;
  color c;

  Circle(PVector _loc, float _radius) {
    loc = _loc;
    radius = _radius;
  }

  void display() {
    int x = (int)loc.x;
    int y = (int)loc.y;
    color pix = img.get(x+img.width/2, y+img.height/2);
    fill(pix);
    //fill(c);
    noStroke();
    float r;
    if (isAnimating && canShowCircles) {
      r = map(pow(float(animatingTime) / duration, 1.0 / 4), 0, 1, 0, radius);
    } else if (isAnimating && !canShowCircles) {
      r = map(1.0 - pow(float(animatingTime) / duration, 1.0 / 4), 0, 1, 0, radius);
    } else if (!canShowCircles) {
      r = radius;
    } else {
      r = 0;
    }
    ellipse(loc.x, loc.y, r * 2.5, r * 2.5);
  }
}
